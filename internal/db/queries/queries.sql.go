// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type AssignCategoriesToTargetsParams struct {
	DishID      pgtype.Int4
	CommodityID pgtype.Int4
	CategoryID  int32
}

type AssignOrdersCommoditiesAndDishesParams struct {
	OrderID     int32
	DishID      pgtype.Int4
	CommodityID pgtype.Int4
}

type CreateCommoditiesParams struct {
	SupplierID  int32
	Name        string
	Cost        int64
	Image       []byte
	Ingredients string
	Weight      int32
	Rating      pgtype.Numeric
}

type CreateCourieresParams struct {
	Name   string
	Phone  string
	Rating pgtype.Numeric
}

type CreateDishesParams struct {
	SupplierID  int32
	Name        string
	Cost        int64
	Image       []byte
	Ingredients pgtype.Text
	Weight      int32
	Calories    int32
	Allergens   string
	Rating      pgtype.Numeric
}

type CreateOrdersParams struct {
	UserID        pgtype.Int4
	Timestamp     pgtype.Timestamp
	SourceAddress pgtype.Text
	TargetAddress pgtype.Text
	CourierID     pgtype.Int4
	Status        pgtype.Text
	PaymentID     pgtype.Int4
}

type CreatePaymentsParams struct {
	Method string
	Status string
}

type CreateSuppliersParams struct {
	Name          string
	WorkTimeStart pgtype.Time
	WorkTimeEnd   pgtype.Time
	Rating        pgtype.Numeric
	Address       string
}

type CreateUserAddressesParams struct {
	UserID  int32
	Address string
}

type CreateUserCardsParams struct {
	UserID int32
	Number string
}

type CreateUsersParams struct {
	Name         pgtype.Text
	Surname      pgtype.Text
	Email        pgtype.Text
	Phone        pgtype.Text
	PasswordHash pgtype.Text
}

const selectCategoryIDs = `-- name: SelectCategoryIDs :many
SELECT id FROM categories
`

func (q *Queries) SelectCategoryIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, selectCategoryIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCommodityIDs = `-- name: SelectCommodityIDs :many
SELECT id FROM commodities
`

func (q *Queries) SelectCommodityIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, selectCommodityIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCourierIDs = `-- name: SelectCourierIDs :many
SELECT id FROM couriers
`

func (q *Queries) SelectCourierIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, selectCourierIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectDishIDs = `-- name: SelectDishIDs :many
SELECT id FROM dishes
`

func (q *Queries) SelectDishIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, selectDishIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectOrderIDs = `-- name: SelectOrderIDs :many
SELECT id FROM orders
`

func (q *Queries) SelectOrderIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, selectOrderIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPaymentIDs = `-- name: SelectPaymentIDs :many
SELECT id FROM payments
`

func (q *Queries) SelectPaymentIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, selectPaymentIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSupplierIDs = `-- name: SelectSupplierIDs :many
SELECT id FROM suppliers
`

func (q *Queries) SelectSupplierIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, selectSupplierIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserIDs = `-- name: SelectUserIDs :many
SELECT id FROM users
`

func (q *Queries) SelectUserIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, selectUserIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
